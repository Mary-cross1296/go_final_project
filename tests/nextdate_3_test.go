package tests

import (
	"fmt"
	"net/url"
	"strings"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

type nextDate struct {
	date   string
	repeat string
	want   string
}

func TestNextDate(t *testing.T) {
	tbl := []nextDate{
		// {"20240126", "", ""},             //ok
		// {"20240126", "k 34", ""},         //ok
		// {"20240126", "ooops", ""},        //ok
		// {"15000156", "y", ""},            //ok
		// {"ooops", "y", ""},               //ok
		// {"16890220", "y", `20240220`},    //ok
		// {"20250701", "y", `20260701`},    //ok
		// {"20240101", "y", `20250101`},    //ok
		// {"20231231", "y", `20241231`},    //ok
		// {"20240229", "y", `20250301`},    //ok
		// {"20240301", "y", `20250301`},    //ok
		// {"20240113", "d", ""},            //ok
		// {"20240113", "d 7", `20240127`},  //ok
		// {"20240120", "d 20", `20240209`}, //ok
		// {"20240202", "d 30", `20240303`}, //ok
		// {"20240320", "d 401", ""},        //ok
		// {"20231225", "d 12", `20240130`}, //ok
		// {"20240228", "d 1", "20240229"},  //ok
	}
	check := func() {
		for _, v := range tbl {
			urlPath := fmt.Sprintf("api/nextdate?now=20240126&date=%s&repeat=%s",
				url.QueryEscape(v.date), url.QueryEscape(v.repeat))
			get, err := getBody(urlPath)
			assert.NoError(t, err)

			next := strings.TrimSpace(string(get))
			_, err = time.Parse("20060102", next)
			if err != nil && len(v.want) == 0 {
				continue
			}

			assert.Equal(t, v.want, next, `{%q, %q, %q}`, v.date, v.repeat, v.want)
		}
	}

	check()
	if !FullNextDate {
		return
	}
	tbl = []nextDate{
		{"20231106", "m 13", "20240213"},           //ok
		{"20240120", "m 40,11,19", ""},             //ok
		{"20240116", "m 16,5", "20240205"},         //ok
		{"20240126", "m 25,26,7", "20240207"},      //ok
		{"20240409", "m 31", "20240531"},           //ok
		{"20240409", "m 18,-1", "20240418"},        //ok
		{"20240329", "m 10,17 12,8,1", "20240810"}, //ok
		{"20230311", "m 07,19 05,6", "20240507"},   //ok
		{"20230311", "m 1 1,2", "20240201"},        //ok
		{"20240127", "m -1", "20240131"},           //ok
		{"20240222", "m -2", "20240228"},           //ok
		{"20240222", "m -2,-3", ""},                //ok
		{"20240326", "m -1,-2", "20240330"},        //ok
		{"20240330", "m -1,-2", "20240331"},        //ok
		{"20240201", "m -1,18", "20240218"},        //ok
		{"20240125", "w 1,2,3", "20240129"},        //ok
		{"20240126", "w 7", "20240128"},            //ok
		{"20230126", "w 4,5", "20240201"},          //ok
		{"20230226", "w 8,4,5", ""},                //ok
		{"20240129", "m -2,-1", "20240131"},        //ok
		{"20240129", "m -2", "20240130"},           //ok
		{"20240130", "m -2", "20240228"},           //ok
		{"20240130", "m -1", "20240131"},           //ok
		{"20240131", "m -1", "20240229"},           //ok
		{"20240126", "m 1,-1 1,7", "20240131"},     //ок
		{"20240127", "m -2,6 3,5", "20240306"},     //ок
		{"20240127", "m -1,-2 5,4", "20240429"},    //ok
		{"20240127", "m -1 2", "20240229"},         //ok
		{"20240126", "m 18", "20240218"},           //ok
	}
	check()
}
